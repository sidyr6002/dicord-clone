// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String          @id @default(cuid())
  userId      String          @unique
  name        String
  imageURL    String?         @db.Text
  email       String          @unique

  servers     Server[]
  members     Member[]
  channels    Channel[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Server {
  id          String          @id @default(cuid())
  name        String
  imageURL    String          @db.Text
  inviteCode  String          @db.Text @unique

  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members     Member[]
  channels    Channel[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  USER
}

model Member {
  id          String          @id @default(cuid())
  role        MemberRole      @default(USER)

  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId    String
  server      Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
}


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id          String          @id @default(cuid())
  name        String
  type        ChannelType     @default(TEXT)

  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId    String
  server      Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
}
