// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String          @id @default(cuid())
  userId      String          @unique
  name        String
  imageURL    String?         @db.Text
  email       String          @unique

  servers     Server[]
  members     Member[]
  channels    Channel[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Server {
  id          String          @id @default(cuid())
  name        String
  imageURL    String          @db.Text
  inviteCode  String          @db.Text @unique

  profileId   String
  profile     Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members     Member[]
  channels    Channel[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  USER
}

model Member {
  id                String          @id @default(cuid())
  role              MemberRole      @default(USER)

  profileId         String
  profile           Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId          String
  server            Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages          Message[]
  directMessages    DirectMessage[]

  messageSent       Conversation[]  @relation("MemberOne")
  messageRecieved   Conversation[]  @relation("MemberTwo")

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
  
  @@unique([profileId, serverId])
}


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id                String          @id @default(cuid())
  name              String
  type              ChannelType     @default(TEXT)

  profileId         String
  profile           Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId          String
  server            Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages          Message[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id                String          @id @default(cuid())
  content           String          @db.Text
  fileURL           String?         @db.Text

  memberId          String
  member            Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId         String
  channel           Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted           Boolean         @default(false)

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id                String          @id @default(cuid())

  memberOneId       String
  memberOne         Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId       String
  memberTwo         Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages    DirectMessage[]

  @@index([memberOneId, memberTwoId])
  @@index([memberTwoId, memberOneId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id                String          @id @default(cuid())
  content           String          @db.Text
  fileURL           String?         @db.Text

  memberId          String
  member            Member          @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId    String
  conversation      Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted           Boolean         @default(false)

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([memberId])
  @@index([conversationId])
}